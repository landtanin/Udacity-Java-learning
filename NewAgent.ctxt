#BlueJ class context
comment0.params=game\ iAmRed
comment0.target=NewAgent(Connect4Game,\ boolean)
comment0.text=\n\ Constructs\ a\ new\ agent,\ giving\ it\ the\ game\ and\ telling\ it\ whether\ it\ is\ Red\ or\ Yellow.\n\ \n\ @param\ game\ The\ game\ the\ agent\ will\ be\ playing.\n\ @param\ iAmRed\ True\ if\ the\ agent\ is\ Red,\ False\ if\ the\ agent\ is\ Yellow.\n
comment1.params=
comment1.target=void\ move()
comment1.text=\n\ The\ move\ method\ is\ run\ every\ time\ it\ is\ this\ agent's\ turn\ in\ the\ game.\ You\ may\ assume\ that\n\ when\ move()\ is\ called,\ the\ game\ has\ at\ least\ one\ open\ slot\ for\ a\ token,\ and\ the\ game\ has\ not\n\ already\ been\ won.\n\ \n\ By\ the\ end\ of\ the\ move\ method,\ the\ agent\ should\ have\ placed\ one\ token\ into\ the\ game\ at\ some\n\ point.\n\ \n\ After\ the\ move()\ method\ is\ called,\ the\ game\ engine\ will\ check\ to\ make\ sure\ the\ move\ was\n\ valid.\ A\ move\ might\ be\ invalid\ if\:\n\ -\ No\ token\ was\ place\ into\ the\ game.\n\ -\ More\ than\ one\ token\ was\ placed\ into\ the\ game.\n\ -\ A\ previous\ token\ was\ removed\ from\ the\ game.\n\ -\ The\ color\ of\ a\ previous\ token\ was\ changed.\n\ -\ There\ are\ empty\ spaces\ below\ where\ the\ token\ was\ placed.\n\ \n\ If\ an\ invalid\ move\ is\ made,\ the\ game\ engine\ will\ announce\ it\ and\ the\ game\ will\ be\ ended.\n\ \n
comment10.params=myColor\ colDef\ rowDef\ immediate
comment10.target=int\ anyoneCanWin(boolean,\ int,\ int,\ boolean)
comment10.text=\n\ Returns\ the\ column\ that\ would\ allow\ anyone\ to\ win,\ either\ NewAgent\ or\ the\ opponent.\n\ Either\ returns\ the\ column\ that\ would\ allow\ a\ person\ win\ in\ this\ turn,\ \n\ or\ returns\ the\ column\ that\ would\ allow\ a\ person\ win\ in\ next\ turn\ \n\ (For\ example,\ to\ establish\ two\ routes\ that\ have\ 3\ slots)\n\ \n\ @param\ myColor\ Whether\ to\ check\ my\ color\ or\ the\ opponent's\ color\n\ @param\ colDef\ the\ starting\ column.\ The\ method\ would\ check\ from\ this\ column\ to\ the\ rightmost\ column\n\ @param\ rowDef\ 1\ if\ I\ want\ to\ make\ the\ lowest\ empty\ index\ be\ one\ slot\ higher,\ 0\ otherwise\n\ @param\ immediate\ To\ control\ whether\ to\ return\ the\ column\ that\ would\ make\ a\ person\ win\ in\ next\ turn\ or\ not\ (true\ if\ not)\n\ \n\ @return\ the\ column\ index\ that\ would\ allow\ the\ agent\ to\ win.\ If\ there\ is\ no\ chance\ to\ win,\ return\ -1\n
comment11.params=
comment11.target=java.lang.String\ getName()
comment11.text=\n\ Returns\ agent\ name.\n\ \n\ @return\ a\ string\ "New\ Agent".\n
comment12.params=columnIndex\ color\ rowDef
comment12.target=java.lang.Integer[]\ longestRoute(int,\ boolean,\ int)
comment12.text=\n\ If\ a\ token\ is\ placed\ in\ a\ column,\ what\ is\ the\ longest\ routes\ that\ it\ will\ linked\ together,\n\ how\ many\ are\ the\ routes\ (of\ the\ same\ length),\ and\ how\ many\ ends\ that\ are\ ready\ to\ be\ filled.\n\ (A\ route\ has\ two\ ends.\ If\ an\ end\ is\ the\ lowest\ empty\ slot\ in\ that\ column,\ then\ it\ is\ ready\ to\ be\ filled.)\n\ \n\ @param\ columnIndex\ the\ index\ of\ the\ column,\ in\ which\ a\ token\ might\ be\ placed\n\ @param\ color\ true\ if\ red,\ false,\ if\ yellow\n\ @param\ rowDef\ 1\ if\ I\ want\ to\ make\ the\ lowest\ empty\ index\ be\ one\ slot\ higher,\ 0\ otherwise\n\ \n\ @return\ an\ array\ of\ three\ elements\ (0\:\ the\ length\ of\ the\ longest\ routes,\ 2\:\ the\ number\ of\ the\ longest\ routes,\ 3\:\ number\ of\ ends\n\ that\ are\ ready\ to\ be\ filled.)\n
comment13.params=columnIndex\ color\ pattern\ rowDef
comment13.target=java.lang.Integer[]\ routeLength(int,\ boolean,\ int,\ int)
comment13.text=\n\ If\ a\ token\ is\ placed\ in\ a\ column,\ how\ long\ is\ the\ route\ (slots\ with\ the\ same\ color)\ that\ are\ linked\ to\ it.\n\ There\ are\ four\ patterns\:\ vertical,\ horizontal,\ ascending\ slope,\ descending\ slope.\n\ A\ route\ has\ two\ ends.\ If\ an\ end\ is\ the\ lowest\ empty\ slot\ in\ that\ column,\ then\ it\ is\ ready\ to\ be\ filled.\n\ \n\ @param\ columnIndex\ the\ index\ of\ the\ column,\ in\ which\ a\ token\ might\ be\ placed\n\ @param\ color\ true\ if\ red,\ false,\ if\ yellow\n\ @param\ pattern\ 1\ if\ vertical,\ 2\ if\ horizontal,\ 3\ if\ descending\ slope,\ 4\ if\ ascending\ slope\n\ @param\ rowDef\ 1\ if\ I\ want\ to\ make\ the\ lowest\ empty\ index\ be\ one\ slot\ higher,\ 0\ otherwise\n\ \n\ @return\ return\ an\ array\ of\ two\ elements\ (0\:\ length\ of\ the\ route,\ 1\:\ how\ many\ ends\ that\ are\ ready\ to\ be\ filled)\n
comment14.params=columnIndex\ x\ y\ rowDef
comment14.target=boolean\ outOfBound(int,\ int,\ int,\ int)
comment14.text=\n\ To\ check\ if\ the\ slot\ I\ want\ to\ check\ is\ out\ of\ the\ game\ panel\ (index\ is\ out\ of\ bound).\n\ \n\ @param\ columnIndex\ the\ index\ of\ the\ column,\ in\ which\ a\ token\ might\ be\ placed\n\ @param\ x\ the\ horizontal\ distance\ from\ the\ lowest\ empty\ slot\ of\ the\ column\ to\ the\ slot\ which\ you\ want\ to\ check\ color\n\ @param\ y\ the\ vertical\ distance\ from\ the\ lowest\ empty\ slot\ of\ the\ column\ to\ the\ slot\ which\ you\ want\ to\ check\ color\n\ @param\ rowDef\ 1\ if\ I\ want\ to\ make\ the\ lowest\ empty\ index\ be\ one\ slot\ higher,\ 0\ otherwise\n\ \n\ @return\ true\ if\ index\ is\ out\ of\ bound,\ false\ if\ index\ is\ valid.\n
comment15.params=columnIndex\ x\ y\ rowDef
comment15.target=boolean\ getIsFilled(int,\ int,\ int,\ int)
comment15.text=\n\ To\ check\ if\ the\ neighbors\ of\ the\ lowest\ empty\ slot\ of\ a\ column\ is\ filled.\n\ \n\ @param\ columnIndex\ the\ index\ of\ the\ column,\ in\ which\ a\ token\ might\ be\ placed\n\ @param\ x\ the\ horizontal\ distance\ from\ the\ lowest\ empty\ slot\ of\ the\ column\ to\ the\ slot\ which\ you\ want\ to\ check\ color\n\ @param\ y\ the\ vertical\ distance\ from\ the\ lowest\ empty\ slot\ of\ the\ column\ to\ the\ slot\ which\ you\ want\ to\ check\ color\n\ @param\ rowDef\ 1\ if\ I\ want\ to\ make\ the\ lowest\ empty\ index\ be\ one\ slot\ higher,\ 0\ otherwise\n\ \n\ @return\ true\ if\ filled,\ false\ if\ empty.\n
comment16.params=columnIndex\ x\ y\ rowDef
comment16.target=boolean\ checkColor(int,\ int,\ int,\ int)
comment16.text=\n\ To\ check\ if\ the\ neighbors\ of\ the\ lowest\ empty\ slot\ of\ a\ column\ is\ the\ same\ color.\n\ \n\ @param\ columnIndex\ the\ index\ of\ the\ column,\ in\ which\ a\ token\ might\ be\ placed\n\ @param\ x\ the\ horizontal\ distance\ from\ the\ lowest\ empty\ slot\ of\ the\ column\ to\ the\ slot\ which\ you\ want\ to\ check\ color\n\ @param\ y\ the\ vertical\ distance\ from\ the\ lowest\ empty\ slot\ of\ the\ column\ to\ the\ slot\ which\ you\ want\ to\ check\ color\n\ @param\ rowDef\ 1\ if\ I\ want\ to\ make\ the\ lowest\ empty\ index\ be\ one\ slot\ higher,\ 0\ otherwise\n\ \n\ @return\ color\ of\ the\ slot.\ True\ if\ red,\ false\ if\ yellow\ (or\ empty).\n
comment2.params=columnNumber
comment2.target=void\ moveOnColumn(int)
comment2.text=\n\ Drops\ a\ token\ into\ a\ particular\ column\ so\ that\ it\ will\ fall\ to\ the\ bottom\ of\ the\ column.\n\ If\ the\ column\ is\ already\ full,\ nothing\ will\ change.\n\ \n\ @param\ columnNumber\ The\ column\ into\ which\ to\ drop\ the\ token.\n
comment3.params=column
comment3.target=int\ getLowestEmptyIndex(Connect4Column)
comment3.text=\n\ Returns\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column,\ or\ -1\ if\ the\ column\ is\ already\ full.\n\ \n\ @param\ column\ The\ column\ to\ check.\n\ \n\ @return\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column\n
comment4.params=columnIndex
comment4.target=int\ getLowestEmptyIndex(int)
comment4.text=\n\ Another\ simplified\ getLowestEmptyIndex.\n\ Returns\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column,\ or\ -1\ if\ the\ column\ is\ already\ full.\n\ \n\ @param\ column\ The\ column\ to\ check.\n\ \n\ @return\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column\n
comment5.params=
comment5.target=int\ randomMove()
comment5.text=\n\ Returns\ a\ random\ valid\ move.\ If\ your\ agent\ doesn't\ know\ what\ to\ do,\ making\ a\ random\ move\n\ can\ allow\ the\ game\ to\ go\ on\ anyway.\n\ \n\ @return\ return\ the\ index\ of\ the\ column\ in\ which\ a\ token\ would\ be\ placed\ into\n
comment6.params=
comment6.target=int\ brilliantMove()
comment6.text=\n\ BrilliantMove\ will\ find\ a\ column,\ so\ that\ if\ My\ Agent\ place\ a\ token\ in\ this\ column,\ the\ token\n\ would\ be\ part\ of\ a\ relatively\ long\ route\ (tokens\ with\ the\ same\ color).\n\ \n\ @return\ return\ the\ index\ of\ the\ column\ in\ which\ a\ token\ would\ be\ placed\ into\n
comment7.params=
comment7.target=java.util.HashSet\ dangerousMove()
comment7.text=\n\ Placing\ a\ token\ in\ some\ of\ the\ columns\ could\ make\ the\ opponent\ win\ (by\ placing\ a\ token\ above\ in\ it).\ \n\ NewAgent\ will\ collect\ all\ the\ dangerous\ columns\ and\ won't\ place\ any\ token\ in\ them.\n\ \n\ @return\ a\ set\ of\ column\ indexes.\n
comment8.params=
comment8.target=int\ ICanWin()
comment8.text=\n\ Returns\ the\ column\ that\ would\ allow\ the\ agent\ to\ win.\n\ \n\ You\ might\ want\ your\ agent\ to\ check\ to\ see\ if\ it\ has\ a\ winning\ move\ available\ to\ it\ so\ that\n\ it\ can\ go\ ahead\ and\ make\ that\ move.\ Implement\ this\ method\ to\ return\ what\ column\ would\n\ allow\ the\ agent\ to\ win.\n\ \n\ @return\ the\ column\ index\ that\ would\ allow\ the\ agent\ to\ win.\n
comment9.params=colDef\ rowDef\ immediate
comment9.target=int\ TheyCanWin(int,\ int,\ boolean)
comment9.text=\n\ Returns\ the\ column\ that\ would\ allow\ the\ opponent\ to\ win.\n\ \n\ You\ might\ want\ your\ agent\ to\ check\ to\ see\ if\ the\ opponent\ would\ have\ any\ winning\ moves\n\ available\ so\ your\ agent\ can\ block\ them.\ Implement\ this\ method\ to\ return\ what\ column\ should\n\ be\ blocked\ to\ prevent\ the\ opponent\ from\ winning.\n\ \n\ @param\ colDef\ the\ starting\ column.\ The\ method\ would\ check\ from\ this\ column\ to\ the\ rightmost\ column\n\ @param\ rowDef\ 1\ if\ I\ want\ to\ make\ the\ lowest\ empty\ index\ be\ one\ slot\ higher,\ 0\ otherwise\n\ \n\ @return\ the\ column\ index\ that\ would\ allow\ the\ opponent\ to\ win\n
numComments=17
